@page "/authors/{id:int}"
@using BlazorWasmAuth.Shared.Domain
@inject IHttpClientFactory ClientFactory
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<FluentButton Appearance="Appearance.Neutral" @onclick="GoBack">Zur√ºck</FluentButton>

<h3>AuthorPage</h3>

@if (_author == null)
{
    <FluentProgress/>
}
else
{
    <FluentCard AreaRestricted="false">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
            <FluentTextField @bind-Value="_author.FirstName" Label="Vorname"/>
            <FluentTextField @bind-Value="_author.LastName" Label="Nachname"/>
            <FluentTextField @bind-Value="_author.EMail" Label="Email"/>
        </FluentStack>
    </FluentCard>
}

@code {

    [Parameter] public int Id { get; set; }

    private Author? _author;

    protected override async Task OnInitializedAsync()
    {
        var client = GetAuthorizedHttpClient();
        _author = await client.GetFromJsonAsync<Author>($"/api/v1/authors/{Id}");

        if (_author == null)
        {
            await ShowErrorAsync($"Kunde mit Id {Id} konnte nicht gefunden werden.");
        }
    }

    private HttpClient GetAuthorizedHttpClient() => ClientFactory.CreateClient("Auth");

    private async Task ShowErrorAsync(string message)
    {
        var dialog = await DialogService.ShowErrorAsync(message);
        var result = await dialog.Result;
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

}